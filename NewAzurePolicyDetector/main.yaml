trigger:
  - none

parameters:
- name: env
  displayName: Environment
  type: string
  default: d
  values:
  - d

variables:
  - group: policy-${{parameters.env}}

pool:
  vmImage: windows-latest


steps:
- task: AzurePowerShell@5
  enabled: false
  displayName: GettingAllPolicies
  inputs:
    azureSubscription: $(azureSubscriptionConnection)
    ScriptType: 'InlineScript'
    azurePowerShellVersion: 'LatestVersion'
    Inline: |
        #Install-Module Az.ResourceGraph -Currentuser -Force
        Get-AzPolicyDefinition -Builtin|Select PolicyDefinitionId|Out-File policies.txt
        (Get-Content policies.txt | Select-Object -Skip 3) | Set-Content policies.txt
        (Get-Content policies.txt).Replace('/providers/Microsoft.Authorization/policyDefinitions/', '') | Set-Content policies.txt
        cat ./policies.txt|wc
        $resourceGroupName="AzurePoliciesChecker"
        $resourceGroup = Get-AzResourceGroup -Name $resourceGroupName
        Write-Host "--------------------"
        Write-Host $resourceGroup.ResourceId
        Write-Host "--------------------"
- task: AzurePowerShell@5
  enabled: false
  displayName: CheckAudit
  inputs:
    azureSubscription: $(azureSubscriptionConnection)
    ScriptType: 'InlineScript'
    azurePowerShellVersion: 'LatestVersion'
    Inline: |
        # New-AzResourceGroup -Name "AzurePoliciesChecker" -Location "East US"
        $resourceGroupName="AzurePoliciesChecker"
        $resourceGroup = Get-AzResourceGroup -Name $resourceGroupName
        Import-Module Az.Resources
        # Remove annoying prompts
        $ErrorActionPreference = "SilentlyContinue"
        # Name of Resource Group 
        # Get file with policies
        # policy per line
        $listPolicy = Get-Content -Path ".\policies.txt"
        # Create file with logs
        Set-Content "log-Audit.txt" "Report of assignment of policies"
        $okCount = 0
        $problemsCount = 0
        $okRaport = "policies-Audit-ok.txt"
        foreach( $policy in $listPolicy)
        {
        $definition = Get-AzPolicyDefinition -Name $policy
        $newName = $definition.Properties.DisplayName.Replace("[", "").Replace("]","")
        if($newName.Length -gt 63)
        {
        $newName = $newName.SubString(0,63)
        }
        New-AzPolicyAssignment -Scope $resourceGroup.ResourceId -PolicyDefinition $definition -Name "TestAssigment" -PolicyParameterObject @{"effect"="Audit"}
        if( -not $? )
        {
        $msg = $Error[0].Exception.Message
        # Remove special char of new line in error
        $msg = $msg.Replace("`n",", ").Replace("`r",", ")
        $msg = $newName + " " + $msg
        Add-Content "log-Audit.txt"  $policy": "$msg
        $problemsCount++
        }
        else {
        Add-Content $okRaport $policy
        $okCount++
        Remove-AzPolicyAssignment -Name "TestAssigment" -Scope $resourceGroup.ResourceId
        }
        }
        Write-Host("Raport of assigments, ok: " + $okCount + ", problems: " + $problemsCount)
- task: AzurePowerShell@5
  enabled: false
  displayName: CheckAuditIfNotExists
  inputs:
    azureSubscription: $(azureSubscriptionConnection)
    ScriptType: 'InlineScript'
    azurePowerShellVersion: 'LatestVersion'
    Inline: |
        # New-AzResourceGroup -Name "AzurePoliciesChecker" -Location "East US"
        $resourceGroupName="AzurePoliciesChecker"
        $resourceGroup = Get-AzResourceGroup -Name $resourceGroupName
        Import-Module Az.Resources
        # Remove annoying prompts
        $ErrorActionPreference = "SilentlyContinue"
        # Name of Resource Group 
        $resourceGroupName="AzurePoliciesChecker"
        # Get file with policies
        # policy per line
        $listPolicy = Get-Content -Path ".\policies.txt"
        $resourceGroup = Get-AzResourceGroup -Name $resourceGroupName
        # Create file with logs
        Set-Content "log-auditIfNotExists.txt" "Report of assignment of policies"
        $okCount = 0
        $problemsCount = 0
        $okRaport = "policies-AuditIfNotExists-ok.txt"
        foreach( $policy in $listPolicy)
        {
        $definition = Get-AzPolicyDefinition -Name $policy
        $newName = $definition.Properties.DisplayName.Replace("[", "").Replace("]","")
        if($newName.Length -gt 63)
        {
        $newName = $newName.SubString(0,63)
        }
        New-AzPolicyAssignment -Scope $resourceGroup.ResourceId -PolicyDefinition $definition -Name "TestAssigment" -PolicyParameterObject @{"effect"="AuditIfNotExists"}
        if( -not $? )
        {
        $msg = $Error[0].Exception.Message
        # Remove special char of new line in error
        $msg = $msg.Replace("`n",", ").Replace("`r",", ")
        $msg = $newName + " " + $msg
        Add-Content "log-auditIfNotExists.txt"  $policy": "$msg
        $problemsCount++
        }
        else {
        Add-Content $okRaport $policy
        $okCount++
        Remove-AzPolicyAssignment -Name "TestAssigment" -Scope $resourceGroup.ResourceId
        }
        }
        Write-Host("Raport of assigments, ok: " + $okCount + ", problems: " + $problemsCount)
- task: AzurePowerShell@5
  enabled: false
  displayName: GettingAllTogheter
  inputs:
    azureSubscription: $(azureSubscriptionConnection)
    ScriptType: 'InlineScript'
    azurePowerShellVersion: 'LatestVersion'
    Inline: |        
        Get-Content policies-AuditIfNotExists-ok.txt, policies-Audit-ok.txt | Set-Content AllMicrosoftPolicies.txt
        cat AllMicrosoftPolicies.txt
- task: AzurePowerShell@5
  enabled: true
  displayName: GettingPoliciesFromInitiative1
  inputs:
    azureSubscription: $(azureSubscriptionConnection)
    ScriptType: 'InlineScript'
    azurePowerShellVersion: 'LatestVersion'
    Inline: |
        Import-Module -Name Az.ResourceGraph
        $azQuery = @"
        policyresources
        | where type =~ 'Microsoft.Authorization/PolicySetDefinitions'
        | where id == "/providers/Microsoft.Management/managementGroups/078ac338-05ad-4b24-b937-2837c3ed4fad/providers/Microsoft.Authorization/policySetDefinitions/adbacbc8dcbf4b1bbc6a59bd"
        | extend policysetDefId = tolower(id)
        | extend policyDefinitions = properties.policyDefinitions
        | mv-expand policyDefinition = policyDefinitions limit 400
        | extend policyDefinitionId = tolower(policyDefinition.policyDefinitionId)
        | extend policyDefinitionReferenceId = policyDefinition.policyDefinitionReferenceId
        | extend groupNames = policyDefinition.groupNames
        | parse policyDefinitionId with "/providers/microsoft.authorization/policydefinitions/" policyId
        | project policyDefinitionReferenceId, groupNames, policyId, policyDefinitionId
        "@
        Search-AzGraph -Query $azQuery|Out-File Initiative1.txt
- task: AzurePowerShell@5
  enabled: true
  displayName: GettingPoliciesFromInitiative2
  inputs:
    azureSubscription: $(azureSubscriptionConnection)
    ScriptType: 'InlineScript'
    azurePowerShellVersion: 'LatestVersion'
    Inline: |
        Import-Module -Name Az.ResourceGraph
        $azQuery = @"
        resources
        | where type == "microsoft.compute/virtualmachines"
        | extend powerState = properties.extended.instanceView.powerState.displayStatus
        | extend extendedInfo = properties.extended.instanceView
        | extend osInfo = properties.storageProfile.osDisk.osType
        | extend osVersion = properties.storageProfile.imageReference.sku
        | extend osProfile = properties.osProfile
        | extend powerState = properties.extended.instanceView.powerState.code
        | extend JoinID = toupper(id)
        | join kind=leftouter( 
        Resources 
        | where type == 'microsoft.compute/virtualmachines/extensions' 
        | extend VMId = toupper(substring(id, 0, indexof(id, '/extensions'))),
            ExtensionName = name 
        ) on `$left.JoinID == `$right.VMId 
        | summarize Extensions = make_list(ExtensionName) by id, name, subscriptionId, resourceGroup, tostring(osInfo), tostring(osVersion), tostring(powerState)
        "@
        Search-AzGraph -Query $azQuery|Out-File Initiative2.txt
- task: AzurePowerShell@5
  enabled: true
  displayName: GetingTogether
  inputs:
    azureSubscription: $(azureSubscriptionConnection)
    ScriptType: 'InlineScript'
    azurePowerShellVersion: 'LatestVersion'
    Inline: |
        Import-Module -Name Az.ResourceGraph
        Get-Content Initiative1.txt, Initiative2.txt | Set-Content AllDeployedInitiatives.txt
        cat AllDeployedInitiatives.txt