trigger:
  - none

parameters:
- name: env
  displayName: Environment
  type: string
  default: d
  values:
  - d
- name: Acquire
  type: boolean
  default: true
- name: DetectNew
  type: boolean
  default: true


variables:
  - group: policy-${{parameters.env}}



jobs:
- job: Acquire
  timeoutInMinutes: 450
  condition: ${{eq(parameters.Acquire, true)}}
  #vmImage: windows-latest
  #pool: Ubuntu2204-PrivatePool-04
  pool: Windows2019-PrivatePool01

  steps:
  - task: AzurePowerShell@5
    enabled: true
    displayName: GettingAllPolicies
    inputs:
      azureSubscription: $(azureSubscriptionConnection)
      ScriptType: 'InlineScript'
      azurePowerShellVersion: 'LatestVersion'
      Inline: |
          #Install-Module Az.ResourceGraph -Currentuser -Force
          Get-AzPolicyDefinition -Builtin|Select PolicyDefinitionId|Out-File policies.txt
          (Get-Content policies.txt | Select-Object -Skip 3) | Set-Content policies.txt
          (Get-Content policies.txt).Replace('/providers/Microsoft.Authorization/policyDefinitions/', '') | Set-Content policies.txt
          cat ./policies.txt|wc
          $resourceGroupName="AzurePoliciesChecker"
          $resourceGroup = Get-AzResourceGroup -Name $resourceGroupName
          Write-Host "--------------------"
          Write-Host $resourceGroup.ResourceId
          Write-Host "--------------------"
  - task: AzurePowerShell@5
    enabled: true
    displayName: CheckAudit
    inputs:
      azureSubscription: $(azureSubscriptionConnection)
      ScriptType: 'InlineScript'
      azurePowerShellVersion: 'LatestVersion'
      Inline: |
          # New-AzResourceGroup -Name "AzurePoliciesChecker" -Location "East US"
          $resourceGroupName="AzurePoliciesChecker"
          $resourceGroup = Get-AzResourceGroup -Name $resourceGroupName
          Import-Module Az.Resources
          # Remove annoying prompts
          $ErrorActionPreference = "SilentlyContinue"
          # Name of Resource Group 
          # Get file with policies
          # policy per line
          $listPolicy = Get-Content -Path ".\policies.txt"
          # Create file with logs
          Set-Content "log-Audit.txt" "Report of assignment of policies"
          $okCount = 0
          $problemsCount = 0
          $okRaport = "policies-Audit-ok.txt"
          foreach( $policy in $listPolicy)
          {
          $definition = Get-AzPolicyDefinition -Name $policy
          $newName = $definition.Properties.DisplayName.Replace("[", "").Replace("]","")
          if($newName.Length -gt 63)
          {
          $newName = $newName.SubString(0,63)
          }
          New-AzPolicyAssignment -Scope $resourceGroup.ResourceId -PolicyDefinition $definition -Name "TestAssigment" -PolicyParameterObject @{"effect"="Audit"}
          if( -not $? )
          {
          $msg = $Error[0].Exception.Message
          # Remove special char of new line in error
          $msg = $msg.Replace("`n",", ").Replace("`r",", ")
          $msg = $newName + " " + $msg
          Add-Content "log-Audit.txt"  $policy": "$msg
          $problemsCount++
          }
          else {
          Add-Content $okRaport $policy
          $okCount++
          Remove-AzPolicyAssignment -Name "TestAssigment" -Scope $resourceGroup.ResourceId
          }
          }
          Write-Host("Raport of assigments, ok: " + $okCount + ", problems: " + $problemsCount)
          dir
  - task: AzurePowerShell@5
    enabled: true
    displayName: CheckAuditIfNotExists
    inputs:
      azureSubscription: $(azureSubscriptionConnection)
      ScriptType: 'InlineScript'
      azurePowerShellVersion: 'LatestVersion'
      Inline: |
          # New-AzResourceGroup -Name "AzurePoliciesChecker" -Location "East US"
          $resourceGroupName="AzurePoliciesChecker"
          $resourceGroup = Get-AzResourceGroup -Name $resourceGroupName
          Import-Module Az.Resources
          # Remove annoying prompts
          $ErrorActionPreference = "SilentlyContinue"
          # Name of Resource Group 
          $resourceGroupName="AzurePoliciesChecker"
          # Get file with policies
          # policy per line
          $listPolicy = Get-Content -Path ".\policies.txt"
          $resourceGroup = Get-AzResourceGroup -Name $resourceGroupName
          # Create file with logs
          Set-Content "log-auditIfNotExists.txt" "Report of assignment of policies"
          $okCount = 0
          $problemsCount = 0
          $okRaport = "policies-AuditIfNotExists-ok.txt"
          foreach( $policy in $listPolicy)
          {
          $definition = Get-AzPolicyDefinition -Name $policy
          $newName = $definition.Properties.DisplayName.Replace("[", "").Replace("]","")
          if($newName.Length -gt 63)
          {
          $newName = $newName.SubString(0,63)
          }
          New-AzPolicyAssignment -Scope $resourceGroup.ResourceId -PolicyDefinition $definition -Name "TestAssigment" -PolicyParameterObject @{"effect"="AuditIfNotExists"}
          if( -not $? )
          {
          $msg = $Error[0].Exception.Message
          # Remove special char of new line in error
          $msg = $msg.Replace("`n",", ").Replace("`r",", ")
          $msg = $newName + " " + $msg
          Add-Content "log-auditIfNotExists.txt"  $policy": "$msg
          $problemsCount++
          }
          else {
          Add-Content $okRaport $policy
          $okCount++
          Remove-AzPolicyAssignment -Name "TestAssigment" -Scope $resourceGroup.ResourceId
          }
          }
          Write-Host("Raport of assigments, ok: " + $okCount + ", problems: " + $problemsCount)
          dir
  - task: AzurePowerShell@5
    enabled: true
    displayName: GettingAllTogheter
    inputs:
      azureSubscription: $(azureSubscriptionConnection)
      ScriptType: 'InlineScript'
      azurePowerShellVersion: 'LatestVersion'
      Inline: |        
          dir
          Get-Content policies-AuditIfNotExists-ok.txt, policies-Audit-ok.txt | Set-Content AllMicrosoftPolicies.txt
          cat AllMicrosoftPolicies.txt
  - task: AzurePowerShell@5
    enabled: true
    displayName: GettingPoliciesFromInitiative1
    inputs:
      azureSubscription: $(azureSubscriptionConnection)
      ScriptType: 'InlineScript'
      azurePowerShellVersion: 'LatestVersion'
      Inline: |
          Install-Module -Name Az.ResourceGraph -Scope CurrentUser -Force
          Import-Module -Name Az.ResourceGraph
          $azQuery = @"
          policyresources
          | where type =~ 'Microsoft.Authorization/PolicySetDefinitions'
          | where id == '/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8'
          | extend policysetDefId = tolower(id)
          | extend policyDefinitions = properties.policyDefinitions
          | mv-expand policyDefinition = policyDefinitions limit 400
          | extend policyDefinitionId = tolower(policyDefinition.policyDefinitionId)
          | extend policyDefinitionReferenceId = policyDefinition.policyDefinitionReferenceId
          | extend groupNames = policyDefinition.groupNames
          | parse policyDefinitionId with '/providers/microsoft.authorization/policydefinitions/' policyId
          | project policyId, policyDefinitionReferenceId
          "@
          Search-AzGraph -Query $azQuery -UseTenantScope|Out-File Initiative1.txt
  - task: AzurePowerShell@5
    enabled: true
    displayName: GettingPoliciesFromInitiative2
    inputs:
      azureSubscription: $(azureSubscriptionConnection)
      ScriptType: 'InlineScript'
      azurePowerShellVersion: 'LatestVersion'
      Inline: |
          Install-Module -Name Az.ResourceGraph -Scope CurrentUser -Force
          Import-Module -Name Az.ResourceGraph
          $azQuery = @"
          policyresources
          | where type =~ 'Microsoft.Authorization/PolicySetDefinitions'
          | where id == '/providers/Microsoft.Authorization/policySetDefinitions/06f19060-9e68-4070-92ca-f15cc126059e'
          | extend policysetDefId = tolower(id)
          | extend policyDefinitions = properties.policyDefinitions
          | mv-expand policyDefinition = policyDefinitions limit 400
          | extend policyDefinitionId = tolower(policyDefinition.policyDefinitionId)
          | extend policyDefinitionReferenceId = policyDefinition.policyDefinitionReferenceId
          | extend groupNames = policyDefinition.groupNames
          | parse policyDefinitionId with '/providers/microsoft.authorization/policydefinitions/' policyId
          | project policyDefinitionReferenceId, policyId
          "@
          Search-AzGraph -Query $azQuery -UseTenantScope|Out-File Initiative2.txt
  - task: AzurePowerShell@5
    enabled: true
    displayName: GetingTogether
    inputs:
      azureSubscription: $(azureSubscriptionConnection)
      ScriptType: 'InlineScript'
      azurePowerShellVersion: 'LatestVersion'
      Inline: |
          Import-Module -Name Az.ResourceGraph
          Get-Content Initiative1.txt, Initiative2.txt | Set-Content AllDeployedInitiatives.txt
          cat AllDeployedInitiatives.txt
  - task: AzurePowerShell@5
    enabled: true
    displayName: PrepareArtefact
    inputs:
      azureSubscription: $(azureSubscriptionConnection)
      ScriptType: 'InlineScript'
      azurePowerShellVersion: 'LatestVersion'
      Inline: |
          New-Item -Path "." -Name "artefacts" -ItemType "directory"
          Copy-Item "*.txt" -Destination ".\artefacts"
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'artefacts'
      artifact: 'NewAzurePolicyDetector'
      publishLocation: 'pipeline'

- job: DetectNew
  timeoutInMinutes: 450
  dependsOn: Acquire
  condition: ${{eq(parameters.DetectNew, true)}}
  #vmImage: windows-latest
  pool: Ubuntu2204-PrivatePool-04
  #pool: Windows2019-PrivatePool01

  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'NewAzurePolicyDetector'
      targetPath: '$(Pipeline.Workspace)'
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'ls -l'